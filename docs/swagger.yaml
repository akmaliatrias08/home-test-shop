basePath: /
definitions:
  health.HealthSuccess:
    properties:
      message:
        example: success
        type: string
    type: object
  models.Role:
    properties:
      created_at:
        example: "2024-07-16T23:13:03.115483+07:00"
        type: string
      deleted_at:
        example: "null"
        type: string
      id:
        example: ab7ac1cb-17c6-4e9a-8cd8-d51d8988c5ec
        type: string
      name:
        example: Admin
        type: string
      updated_at:
        example: "2024-07-16T23:13:03.115483+07:00"
        type: string
    type: object
  models.User:
    properties:
      created_at:
        example: "2024-07-16T23:13:03.115483+07:00"
        type: string
      deleted_at:
        example: "null"
        type: string
      id:
        example: ab7ac1cb-17c6-4e9a-8cd8-d51d8988c5ec
        type: string
      name:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: string
      salt:
        type: string
      updated_at:
        example: "2024-07-16T23:13:03.115483+07:00"
        type: string
      username:
        type: string
    type: object
  product.BadRequestCreateProductResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  product.BadRequestGetProductByCategoryResponse:
    properties:
      error:
        example: record not found
        type: string
    type: object
  product.CreateProductDTO:
    properties:
      name:
        example: Love Gold Earing
        type: string
      price:
        example: 200000
        type: number
      product_category_id:
        example: 34407d74-2ab1-4933-bbe7-1240b0be9702
        type: string
    required:
    - name
    - price
    - product_category_id
    type: object
  product.Product:
    properties:
      created_at:
        example: "2024-07-16T23:13:03.115483+07:00"
        type: string
      deleted_at:
        example: "null"
        type: string
      id:
        example: ab7ac1cb-17c6-4e9a-8cd8-d51d8988c5ec
        type: string
      name:
        example: Couple Ring
        type: string
      price:
        example: 15000
        type: number
      product_category:
        $ref: '#/definitions/product_category.ProductCategories'
      product_category_id:
        example: ab7ac1cb-17c6-4e9a-8cd8-d51d8988c5ec
        type: string
      updated_at:
        example: "2024-07-16T23:13:03.115483+07:00"
        type: string
    type: object
  product.SuccessCreateProductResponse:
    properties:
      data:
        $ref: '#/definitions/product.Product'
      message:
        example: success
        type: string
    type: object
  product.SuccessGetProductByCategoryResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/product.Product'
        type: array
      message:
        example: success
        type: string
    type: object
  product_category.BadRequestCreateProductCategoryResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  product_category.CreateProductCategoryDTO:
    properties:
      name:
        example: fashion
        type: string
    type: object
  product_category.ProductCategories:
    properties:
      created_at:
        example: "2024-07-16T23:13:03.115483+07:00"
        type: string
      deleted_at:
        example: "null"
        type: string
      id:
        example: ab7ac1cb-17c6-4e9a-8cd8-d51d8988c5ec
        type: string
      name:
        example: electronic
        type: string
      updated_at:
        example: "2024-07-16T23:13:03.115483+07:00"
        type: string
    type: object
  product_category.SuccessCreateProductCategoryResponse:
    properties:
      data:
        $ref: '#/definitions/product_category.ProductCategories'
      message:
        example: success
        type: string
    type: object
  product_category.SuccessGetAllProductCategoryResponse:
    properties:
      count:
        example: 1
        type: integer
      data:
        items:
          $ref: '#/definitions/product_category.ProductCategories'
        type: array
      message:
        example: success
        type: string
    type: object
  role.CreateRoleDTO:
    properties:
      name:
        example: Admin
        type: string
    required:
    - name
    type: object
  role.UpdateRoleDTO:
    properties:
      name:
        example: Shop
        type: string
    required:
    - name
    type: object
  users.BadRequestLoginResponse:
    properties:
      error:
        example: username not exist
        type: string
    type: object
  users.BadRequestRegisterResponse:
    properties:
      error:
        example: username is exist
        type: string
    type: object
  users.CreateUserDTO:
    properties:
      name:
        example: Admin Shop
        type: string
      password:
        example: adminshop123
        type: string
      role_id:
        example: 8cb17fe3-3552-4bfa-852f-a9a7d91fd00d
        type: string
      username:
        example: adminshop
        type: string
    required:
    - name
    - password
    - role_id
    - username
    type: object
  users.LoginDTO:
    properties:
      password:
        example: adminshop123
        type: string
      username:
        example: adminshop
        type: string
    required:
    - password
    - username
    type: object
  users.SuccessAuthorizeToken:
    properties:
      message:
        example: token is valid
        type: string
    type: object
  users.SuccessLoginResponse:
    properties:
      data:
        $ref: '#/definitions/users.TokenResponse'
      message:
        example: success
        type: string
    type: object
  users.SuccessRegisterResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      message:
        example: success
        type: string
    type: object
  users.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MjEzMjQyMTksInVzZXJfaWQiOiI3OTU0OTEyMy05ZmZlLTQ2YTItYTUxNS05YmQ4MTdkOGQzMzEifQ.oR6zbJn6YNy0x2aGJdzpoU-eXLzOtJyAUxHaC5D2txA
        type: string
    type: object
  users.UnauthorizedToken:
    properties:
      message:
        example: unauthorized
        type: string
    type: object
host: localhost:5000
info:
  contact: {}
  description: A Online Shop Backend Service
  title: Online Shop
  version: "1.0"
paths:
  /auth/authorize:
    get:
      description: Authorize user access token after login
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.SuccessAuthorizeToken'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/users.UnauthorizedToken'
      summary: Authorize user
      tags:
      - auth
  /auth/login:
    post:
      description: Login a new user
      parameters:
      - description: Login user
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/users.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.SuccessLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.BadRequestLoginResponse'
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      description: Regist a new user
      parameters:
      - description: Register user
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/users.CreateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.SuccessRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.BadRequestRegisterResponse'
      summary: Register user
      tags:
      - auth
  /health:
    get:
      description: Responds if the APIs success.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.HealthSuccess'
      summary: Check health APIs
      tags:
      - health
  /product:
    post:
      description: Create new product
      parameters:
      - description: Create product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/product.CreateProductDTO'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.SuccessCreateProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.BadRequestCreateProductResponse'
      summary: Create product
      tags:
      - product
  /product-category:
    get:
      description: Get all product category
      parameters:
      - description: Number of page to load
        in: query
        name: page
        type: string
      - description: Number page size or limit to display data
        in: query
        name: pageSize
        type: string
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product_category.SuccessGetAllProductCategoryResponse'
      summary: Get all product category
      tags:
      - product-category
    post:
      description: Create new product category
      parameters:
      - description: Create product category
        in: body
        name: product-category
        required: true
        schema:
          $ref: '#/definitions/product_category.CreateProductCategoryDTO'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product_category.SuccessCreateProductCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product_category.BadRequestCreateProductCategoryResponse'
      summary: Create product category
      tags:
      - product-category
  /product/{product_category_id}:
    get:
      description: Get all product by product category
      parameters:
      - description: product category id from product category
        in: path
        name: product_category_id
        required: true
        type: string
      - description: Number of page to load
        in: query
        name: page
        type: string
      - description: Number page size or limit to display data
        in: query
        name: pageSize
        type: string
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.SuccessGetProductByCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.BadRequestGetProductByCategoryResponse'
      summary: Get all product by product category
      tags:
      - product
  /role:
    get:
      description: Get all role that exist
      parameters:
      - description: Number of page to load
        in: query
        name: page
        type: string
      - description: Number page size or limit to display role data
        in: query
        name: pageSize
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      summary: Get all role
      tags:
      - role
    post:
      description: Create new role
      parameters:
      - description: Create role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/role.CreateRoleDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Role'
      summary: Create role
      tags:
      - role
  /role/{id}:
    delete:
      description: Delete role by ID
      parameters:
      - description: Role id to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
      summary: Delete role by ID
      tags:
      - role
    put:
      description: Update role by ID
      parameters:
      - description: Role id to update
        in: path
        name: id
        required: true
        type: string
      - description: Update role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/role.UpdateRoleDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
      summary: Update role by ID
      tags:
      - role
swagger: "2.0"
